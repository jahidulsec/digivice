// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String          @id @default(uuid())
  username      String          @unique
  name          String?
  password      String
  createdAt     DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  Doctor        Doctor[]
  folder        Folder[]
  folderContent FolderContent[]
}

model Doctor {
  id          Int      @id @default(autoincrement())
  fullName    String
  slug        String   @unique
  childId     Int      @unique
  designation String?
  email       String?
  mobile      String?  @default("")
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  adminId     String?

  admin   Admin?    @relation(fields: [adminId], references: [id], onDelete: SetNull)
  Visit   Visit[]
  folder  Folder[]
  Viewers Viewers[]
}

model Visit {
  id        Int      @id @default(autoincrement())
  name      String
  mobile    String
  email     String?
  createdAt DateTime @default(now())

  doctorId Int
  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  doctorId  Int
  adminId   String?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  doctor        Doctor          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  admin         Admin?          @relation(fields: [adminId], references: [id], onDelete: SetNull)
  folderContent FolderContent[]
}

model FolderContent {
  id        Int      @id @default(autoincrement())
  name      String
  filePath  String
  folderId  Int
  adminId   String?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  admin  Admin? @relation(fields: [adminId], references: [id], onDelete: SetNull)
}

model Viewers {
  id        Int      @id @default(autoincrement())
  doctorId  Int
  createdAt DateTime @default(now())

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}
