generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String          @id @default(uuid())
  username      String          @unique
  name          String?
  password      String
  createdAt     DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  Doctor        Doctor[]
  folder        Folder[]
  folderContent FolderContent[]
}

model Doctor {
  id               Int                @id @default(autoincrement())
  fullName         String
  slug             String             @unique
  childId          Int                @unique
  designation      String
  email            String?
  mobile           String             @default("")
  createdAt        DateTime           @default(now())
  updateAt         DateTime           @updatedAt
  adminId          String?
  admin            Admin?             @relation(fields: [adminId], references: [id])
  folder           Folder[]
  SocialMediaLinks SocialMediaLinks[]
  Viewers          Viewers[]
  Visit            Visit[]

  @@index([adminId], map: "Doctor_adminId_fkey")
}

model SocialMediaLinks {
  id       Int     @id @default(autoincrement())
  url      String
  doctorId Int?
  doctor   Doctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId], map: "SocialMediaLinks_doctorId_fkey")
}

model Visit {
  id        Int      @id @default(autoincrement())
  name      String
  mobile    String
  email     String?
  createdAt DateTime @default(now())
  doctorId  Int
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId], map: "Visit_doctorId_fkey")
}

model Folder {
  id            Int             @id @default(autoincrement())
  name          String
  doctorId      Int
  adminId       String?
  createdAt     DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  admin         Admin?          @relation(fields: [adminId], references: [id])
  doctor        Doctor          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  folderContent FolderContent[]

  @@index([adminId], map: "Folder_adminId_fkey")
  @@index([doctorId], map: "Folder_doctorId_fkey")
}

model FolderContent {
  id            Int      @id @default(autoincrement())
  name          String
  thumbnailPath String?  @default("")
  filePath      String
  folderId      Int
  adminId       String?
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
  isPopular     Int      @default(0) @map("is_popular") @db.TinyInt
  admin         Admin?   @relation(fields: [adminId], references: [id])
  folder        Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@index([adminId], map: "FolderContent_adminId_fkey")
  @@index([folderId], map: "FolderContent_folderId_fkey")
}

model Viewers {
  id        Int      @id @default(autoincrement())
  doctorId  Int
  createdAt DateTime @default(now())
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId], map: "Viewers_doctorId_fkey")
}
